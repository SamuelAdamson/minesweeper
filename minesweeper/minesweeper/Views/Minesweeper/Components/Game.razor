@*
	Game UI Component
	Samuel Adamson
*@
@using minesweeper.Models;
@using minesweeper.Models.CustomEventArgs;

<div class="Game">
	<ModeUI @ref="modeSelector" />
	<div class="grid-wrapper">
		<div class="grid">
		@for(int i = 0; i < game.NRows; i++)
			{
				<div class="cell-row"> 
				@for(int j = 0; j < game.NCols; j++)
				{
					<CellUI Cell_=@game.Grid[i,j] Mode=@game.Mode/>
				}
				</div>
			}
		</div>
	</div>
	<TimerUI @ref="timer" />
</div>

@code {
	// Properties
	ModeUI modeSelector;
	TimerUI timer;
	CellUI[,] cellUIs;

	// Game reference
	Minesweeper game;

	/// <summary>
	/// Game Constructor
	/// </summary>
	public Game()
	{
		// Create new game
		game = new Minesweeper("hard");

	}

	/// <summary>
	/// After Render
	/// </summary>
	/// <param name="firstRender"> First Render </param>
	protected override void OnAfterRender(bool firstRender)
	{
		// Subscribe events
		modeSelector.ModeChange += HandleModeChange;
		timer.Pause += HandlePause;
		timer.Unpause += HandleUnpause;
		timer.Reset += HandleReset;
	}

	/// <summary>
	/// Handle Change of Mode
	/// </summary>
	/// <param name="sender"> Sender </param>
	/// <param name="me"> Mode Event Arguments </param>
	private void HandleModeChange(object? sender, ModeEventArgs me)
	{

		// Reset timer
		timer.ResetTimer();
		timer.Dispose(); // Dispose timer -- Stop ticks

		// Change mode
		ChangeMode(me.NewMode);

		// Handle timer reset
		if(!timer.Paused)
		{
			timer.StartTimer();
		}
	}

	/// <summary>
	/// Change Mode
	/// </summary>
	/// <param name="mode"></param>
	private void ChangeMode(string mode)
	{
		// Assign new game
		game = new Minesweeper(mode);
		GC.Collect(); // Clean up old object

		System.Diagnostics.Debug.WriteLine(game.Mode);
	}

	/// <summary>
	/// Handle Pause Event
	/// </summary>
	/// <param name="sender"> Sender </param>
	/// <param name="pe"> Pause Event Arguments </param>
	private void HandlePause(object? sender, TimerEventArgs te)
	{
		System.Diagnostics.Debug.WriteLine(te.Message); // TODO
	}

	/// <summary>
	/// Handle Unpause Event
	/// </summary>
	/// <param name="sender"> Sender </param>
	/// <param name="pe"> Pause Event Arguments </param>
	private void HandleUnpause(object? sender, TimerEventArgs te)
	{
		System.Diagnostics.Debug.WriteLine(te.Message); //TODO
	}

	/// <summary>
	/// Handle Reset Event
	/// </summary>
	/// <param name="sender"> Sender </param>
	/// <param name="te"> Reset Event Arguments </param>
	private void HandleReset(object? sender, TimerEventArgs te)
	{
		System.Diagnostics.Debug.WriteLine(te.Message); // TODO
	}
}
