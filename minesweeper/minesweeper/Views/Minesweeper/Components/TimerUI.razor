@*
	Timer UI Component
	Samuel Adamson
*@
@using Microsoft.AspNetCore.Components.Web;
@using minesweeper.Models.CustomEventArgs;
@using System.Threading;
@implements IDisposable;

<div class="TimerUI d-flex flex-row justify-content-between">
	<h3 class="display-6 time">@timeElapsed</h3>
	<button class="btn pause" @onclick="OnPause">@pauseMsg</button>
</div>

@code {
	// Events
	public event EventHandler<PauseEventArgs> Pause;
	public event EventHandler<PauseEventArgs> Unpause;

	// Declare timer
	Timer gameTimer;
	int gameTime, hours, minutes, seconds;
	string timeElapsed, pauseMsg;
	bool paused;

	/// <summary>
	/// Constructor
	/// </summary>
	public TimerUI()
	{
		// Game not paused
		paused = false;
		pauseMsg = "pause";

		// Initialize time string
		timeElapsed = "00:00:00";

		// Start timer
		SetTimer();
		StartTimer();
	}

	// Access control
	public bool Paused { get => paused; }

	/// <summary>
	/// Create a new timer with duetime
	/// </summary>
	/// <param name="dueTime"></param>
	private void NewTimer(int dueTime)
	{
		gameTimer = new Timer(OnGameTimerTick, null, dueTime, 1000);
	}

	/// <summary>
	/// Callback for timer
	/// </summary>
	/// <param name="stateInfo"></param>
	private void OnGameTimerTick(Object? stateInfo)
	{	
		// Update gametime
		gameTime++;
		hours = gameTime / 3600;
		minutes = gameTime / 60;
		seconds = gameTime % 60;

		// Set elapsed time and update state
		SetTimeElapsed();
	}

	/// <summary>
	/// Update time elapsed
	/// </summary>
	private void SetTimeElapsed()
	{
		timeElapsed = $"{hours.ToString("D2")}:{minutes.ToString("D2")}:{seconds.ToString("D2")}";
		InvokeAsync(() => { StateHasChanged(); });
	}

	/// <summary>
	/// On Pause click
	/// </summary>
	private void OnPause()
	{
		if(paused) // Check already Paused
		{
			// Unpause GUI and raise the unpause event
			UnpauseUI();
			RaiseUnpause();
		}
		else
		{
			// Pause GUI and raise pause event
			PauseUI();
			RaisePause();
		}
	}

	/// <summary>
	/// Raise Pause Event
	/// </summary>
	protected virtual void RaisePause()
	{
		Pause?.Invoke(this, new PauseEventArgs("Game Paused!"));
	}

	/// <summary>
	/// Raise Unpause Event
	/// </summary>
	protected virtual void RaiseUnpause()
	{
		Unpause?.Invoke(this, new PauseEventArgs("Game Unpaused!"));
	}

	public void UnpauseUI()
	{
		// Set pause message and create new timer (start ticks)
		NewTimer(500);
		pauseMsg = "pause";
		paused = false;
	}

	public void PauseUI()
	{
		// Set pause message and dispose of timer (stop ticks)
		Dispose();
		paused = true;
		pauseMsg = "unpause";
	}

	/// <summary>
	/// Set timer to 00:00:00
	/// </summary>
	private void SetTimer()
	{
		// Reset values
		gameTime = 0;
		hours = 0;
		minutes = 0;
		seconds = 0;
	}

	/// <summary>
	/// Reset Timer to 00:00:00 and update elapsed time
	/// </summary>
	public void ResetTimer()
	{
		// Set timer values and set elapsed time
		SetTimer();
		SetTimeElapsed();
	}

	/// <summary>
	/// Dispose old timer, start a new timer
	/// </summary>
	public void StartTimer()
	{
		// Dispose of old timer and create new one
		Dispose();
		NewTimer(500);
	}

	/// <summary>
	/// Dispose - Idisposable
	/// </summary>
	public void Dispose()
	{
		gameTimer?.Dispose();
	}
}
