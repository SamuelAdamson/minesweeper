@*
	Game UI Component
	Samuel Adamson
*@
@using minesweeper.Models;
@using minesweeper.Models.CustomEventArgs;

<div class="GameUI">
	<ModeUI @ref="modeSelector" />
	<GridUI @ref="grid" Game_=@game/>
	<TimerUI @ref="timer" />
</div>

@code {
	// Properties
	ModeUI modeSelector;
	TimerUI timer;
	GridUI grid;

	// Game reference
	Game game;

	/// <summary>
	/// Constructor -- called before render
	/// </summary>
	public GameUI()
	{
		// Create new game
		game = new Game("easy");
	}

	/// <summary>
	/// After Render
	/// </summary>
	/// <param name="firstRender"> First Render </param>
	protected override void OnAfterRender(bool firstRender)
	{
		// Subscribe events
		modeSelector.ModeChange += HandleModeChange;
		timer.Pause += HandlePause;
		timer.Unpause += HandleUnpause;
		timer.Reset += HandleReset;
	}

	/// <summary>
	/// Handle Change of Mode
	/// </summary>
	/// <param name="sender"> Sender </param>
	/// <param name="me"> Mode Event Arguments </param>
	private void HandleModeChange(object? sender, ModeEventArgs me)
	{
		// Reset timer
		timer.ResetTimer();
		timer.Dispose(); // Dispose timer -- Stop ticks

		// Change mode
		NewGame(me.NewMode);

		// Handle timer reset
		if(timer.Paused)
		{
			timer.UnpauseUI();
			grid.OnUnpause();
		}

		timer.StartTimer(); // Start timer
	}

	/// <summary>
	/// Create new game, update UI state
	/// </summary>
	/// <param name="mode"> Mode String </param>
	private void NewGame(string mode)
	{
		// Assign new game
		game = new Game(mode);
		StateHasChanged(); // Change state.

		// Garbage collector
		GC.Collect(); // Clean up old object
	}

	/// <summary>
	/// Handle Pause Event
	/// </summary>
	/// <param name="sender"> Sender </param>
	/// <param name="pe"> Pause Event Arguments </param>
	private void HandlePause(object? sender, TimerEventArgs te)
	{
		// Pause Grid
		grid.OnPause();
		StateHasChanged();
	}

	/// <summary>
	/// Handle Unpause Event
	/// </summary>
	/// <param name="sender"> Sender </param>
	/// <param name="pe"> Pause Event Arguments </param>
	private void HandleUnpause(object? sender, TimerEventArgs te)
	{
		// Unpause Grid
		grid.OnUnpause();
		StateHasChanged();
	}

	/// <summary>
	/// Handle Reset Event
	/// </summary>
	/// <param name="sender"> Sender </param>
	/// <param name="te"> Reset Event Arguments </param>
	private void HandleReset(object? sender, TimerEventArgs te)
	{
		string currMode = game.Mode; // Get current mode
		NewGame(currMode); // Create new game
	}
}
