@{
    ViewData["Title"] = "about";
}

<div class="about">
    <div class="d-flex align-items-center flex-column pe-4 ps-4">
        <h1 class="display-2 pt-3 pb-1"> the game </h1>
        <p> 
            Minesweeper involves a grid of cells where some cells have hidden mines and others do not. The player's objective
            is to uncover all cells that are not hiding a mine. If the player uncovers a cell that is hiding a mine, the player loses. 
            To assist the player in discovering the mineless cells, each uncovered cell shows the number of adjacent cells that are hiding 
            mines. It will never be the case that the first cell a player selects is hiding a mine.
        </p>
        <p>
            The player is able to flag cells that they believe to be hiding a mine. In this version of minesweeper, the user can double click 
            a previously uncovered cell to uncover all adjacent cells that are not flagged as mines. However, if that cell is adjacent to more
            flags than it is mines, this functionality will not work in order to protect the player from misclicks.
        </p>
    </div>
    
    <div class="d-flex align-items-center flex-column pe-4 ps-4">
        <h1 class="display-2 pt-3 pb-1"> the algorithm </h1>
        <p>
            If the player uncovers a cell which is not adjacent to any mines, all nearby cells will also be automatically uncovered. Let's define <i>nearby</i> 
            in this statement. 
        </p>
        <p>
            For the purposes of this description, we will refer to the originally selected cell as the <strong>source</strong>. All mines that are directly adjacent
            to the source, are considered to be <i>nearby</i> and will be uncovered. 
        </p>
        <img src="~/img/layer1.png" alt="layer1" />
        <p>
            Now our definition of <i>nearby</i> cells does not stop here. Let's consider the case that one of these newly uncovered cells is similar to the source in that 
            all of its directly adjacent neighbors are not mines. In this case, we can consider this cell to be a <strong>new source</strong> cell. All of the cells 
            directly adjacent to the new source cell are considered to be <i>nearby</i> and will be uncovered.
        </p>
        <img src="~/img/layer2.png" alt="layer2" />
        <p>
            From this point forward, our search for <i>nearby</i> cells becomes rather repetitive. Each new cell that is uncovered becomes a new source if it satisfies
            the condition that none of its directly adjacent neighbors are mines.
        </p>
        <p>
            So, let's recap. In the framing of a divide-and-conquer algorithm, we need to break our problem down into smaller tasks. The small task in this case is to check 
            that a cell is not adjacent to any mines. If this condition is met, we need to traverse each of its directly adjacent neighbors and perform the same check for each 
            of those cells. We can choose between two methods to perform this traversal.
        </p>
        <h4 class="display-6 pt-3"> bfs </h4>
        <p>
            <strong>Breadth-first search</strong> (BFS) is a traversal where we start at a source node and search all connected nodes in <strong>layers</strong>. 
            The first layer is the set of nodes that are directly connected to the source, the second layer is the set of nodes that are directly connected to the first layer, 
            and so on until we are out of connected nodes. In the context of minesweeper, cells are connected by adjacency. Using BFS, we first visit the cells that are 
            directly adjacent to the source - the <strong>first layer</strong>. The <strong>second layer</strong> would be all cells directly adjacent to the
            first layer, the <strong>third layer</strong> would be all cells directly adjacent to the second layer, etc.
        </p>
        <img src="~/img/bfs.gif" alt="bfs" />
        <h4 class="display-6 pt-3"> dfs </h4>
        <p>
            Our second option is <strong>depth-first search</strong> (DFS). In DFS, we start at a source node and search as far down a single 'path' as 
            possible before backtracking. The first path is typically chosen based on how the structure is organized. In minesweeper, we may label all adjacent 
            cells with indices and give preference to the lowest index. 
        </p>
        <img src="~/img/dfs.gif" alt="dfs" />
        <p>
            So, which method is used in this implementation of minesweeper? It turns out that the performance of both algorithms in this situation are fairly similar. 
            As far as time complexity, we must visit each visit the same number of nearby nodes in both cases ...
        </p>
    </div>

    <div class="d-flex align-items-center flex-column pe-4 ps-4">
        <h1 class="display-2 pt-3 pb-1"> the developer </h1>
        <p> 
            My name is Samuel Adamson. I am a undergraduate Computer Science student at the University of Colorado with a focus in AI. For the most part, my professional experience 
            has centered around data engineering and backend engineering. As my career progresses, I hope to shift my focus towards machine learning engineering.
            In my freetime, I enjoy building web apps like this one. Feel free to check out my <a href="https://samueladamson.github.io/#/" target="_blank" rel="noopener noreferrer">portfolio</a>.
        </p>
    </div>
</div>
