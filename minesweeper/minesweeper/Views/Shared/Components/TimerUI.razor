@*
	Timer UI Component
	Samuel Adamson
*@
@using Microsoft.AspNetCore.Components.Web;
@using minesweeper.Models.CustomEventArgs;
@using System.Threading;
@implements IDisposable;

<div class="TimerUI d-flex flex-row justify-content-center">
	<h3 class="display-6 time">@timeElapsed</h3>
	<button class="btn pause" @onclick="OnPause">@pauseMsg</button>
</div>

@code {

	// Declare timer
	Timer gameTimer;
	int gameTime, hours, minutes, seconds;
	string timeElapsed, pauseMsg;
	bool paused;

	// Events
	public event EventHandler<PauseEventArgs> Pause;
	public event EventHandler<PauseEventArgs> Unpause;

	/// <summary>
	/// Constructor
	/// </summary>
	public TimerUI()
	{
		// Set time
		ResetTime();
		SetTimeElapsed();

		// Game not paused
		paused = false;
		pauseMsg = "pause";

		// Create new game timer
		NewTimer(1000);
	}

	/// <summary>
	/// Create a new timer with duetime
	/// </summary>
	/// <param name="dueTime"></param>
	private void NewTimer(int dueTime)
	{
		gameTimer = new Timer(OnGameTimerTick, null, dueTime, 1000);
	}

	/// <summary>
	/// Callback for timer
	/// </summary>
	/// <param name="stateInfo"></param>
	private void OnGameTimerTick(Object? stateInfo)
	{
		// Update gametime
		gameTime++;
		hours = gameTime / 3600;
		minutes = gameTime / 60;
		seconds = gameTime % 60;
		SetTimeElapsed();

		InvokeAsync(() => { StateHasChanged(); });
	}

	/// <summary>
	/// On Pause click
	/// </summary>
	private void OnPause()
	{
		if(paused) // Check already Paused
		{
			// Set pause message and create new timer (start ticks)
			NewTimer(500);
			pauseMsg = "pause";
			paused = false;

			// Raise event
			RaisePause();
		}
		else
		{	
			// Set pause message and dispose of timer (stop ticks)
			Dispose();
			paused = true;
			pauseMsg = "unpause";

			// Raise event
			RaiseUnpause();
		}
	}

	/// <summary>
	/// Raise Pause Event
	/// </summary>
	protected virtual void RaisePause()
	{
		Pause?.Invoke(this, new PauseEventArgs("Game Paused!"));
	}

	/// <summary>
	/// Raise Unpause Event
	/// </summary>
	protected virtual void RaiseUnpause()
	{
		Unpause?.Invoke(this, new PauseEventArgs("Game Unpaused!"));
	}

	/// <summary>
	/// Update time elapsed
	/// </summary>
	private void SetTimeElapsed()
	{
		timeElapsed = $"{hours.ToString("D2")}:{minutes.ToString("D2")}:{seconds.ToString("D2")}";
	}

	/// <summary>
	/// Reset time to 00:00:00
	/// </summary>
	public void ResetTime()
	{
		hours = 0;
		minutes = 0;
		seconds = 0;
	}

	/// <summary>
	/// Dispose - Idisposable
	/// </summary>
	public void Dispose()
	{
		gameTimer?.Dispose();
	}

}
